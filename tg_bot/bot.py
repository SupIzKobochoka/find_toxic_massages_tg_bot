# bot.py
import logging

import os
from dataclasses import dataclass
from typing import Any, Dict, List, Optional

from dotenv import load_dotenv
from main_model.sbert_predict import predict_toxic_proba

from telegram import Update, BotCommand  # NEW: BotCommand –¥–ª—è /help-–º–µ–Ω—é
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

import aiohttp
import asyncio

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
log = logging.getLogger("toxbot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv("tg_bot/api_key.env")
API_KEY = os.getenv("API_KEY")
if not API_KEY:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω API_KEY –≤ tg_bot/api_key.env")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Äî –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê –ù–ê –ö–ê–ñ–î–´–ô –ß–ê–¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Äî
@dataclass
class ChatState:
    active: bool = False              # –≤–∫–ª—é—á—ë–Ω –ª–∏ –±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    mode: str = "all"                 # 'all' | 'only_toxic'
    threshold: float = 0.5            # –ø–æ—Ä–æ–≥ –¥–ª—è only_toxic

CHAT_STATES: dict[int, ChatState] = {}


def get_state(chat_id: int) -> ChatState:
    st = CHAT_STATES.get(chat_id)
    if not st:
        st = ChatState()
        CHAT_STATES[chat_id] = st
    return st


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import re
import requests
from telegram import Update
from telegram.ext import ContextTypes

def get_joke_from_api() -> str:
    url = "http://rzhunemogu.ru/RandJSON.aspx?CType=1"
    try:
        resp = requests.get(url, timeout=8)
        resp.encoding = "windows-1251"

        if resp.status_code != 200:
            return "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É üêõ"

        raw = resp.text.lstrip("\ufeff")  # —É–±–∏—Ä–∞–µ–º BOM, –µ—Å–ª–∏ –µ—Å—Ç—å

        # –ò—â–µ–º content —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫
        m = re.search(r'"content"\s*:\s*"(.*?)"\s*}', raw, flags=re.S)
        if not m:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç üêõ"

        joke = m.group(1)
        joke = joke.replace("\r\n", "\n").replace("\r", "\n")
        joke = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F]', '', joke)

        return joke.strip() or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç üêõ"

    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    st.active = True
    st.mode = "all"
    st.threshold = 0.5
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.\n"
        "–†–µ–∂–∏–º: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help"
    )

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    st.active = False
    await update.message.reply_text("üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ö–æ–º–∞–Ω–¥—ã –≤—Å—ë –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω—ã.")

async def cmd_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    st.active = True
    st.mode = "all"
    await update.message.reply_text("üîÅ –†–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω: –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.")

async def cmd_only_toxic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    st.active = True
    st.mode = "only_toxic"

    thr = st.threshold
    if context.args:
        try:
            thr = float(context.args[0])
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: /only_toxic 0.6\n"
                f"–û—Å—Ç–∞–≤–ª—è—é –ø—Ä–µ–∂–Ω–∏–π –ø–æ—Ä–æ–≥: {st.threshold:.2f}"
            )
        else:
            thr = min(max(thr, 0.0), 1.0)
            st.threshold = thr

    await update.message.reply_text(
        f"üéØ –†–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω: –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ ‚â• –ø–æ—Ä–æ–≥–∞.\n"
        f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: {st.threshold:.2f}."
    )

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    await update.message.reply_text(
        "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å:\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'–¥–∞' if st.active else '–Ω–µ—Ç'}\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {st.mode}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥: {st.threshold:.2f}"
    )

# NEW: /help
async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    await update.message.reply_text(
        "üÜò Help\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (—Ä–µ–∂–∏–º: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)\n"
        "‚Ä¢ /stop ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /all_massages ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ /only_toxic <–ø–æ—Ä–æ–≥> ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å ‚â• –ø–æ—Ä–æ–≥–∞ (0..1, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5)\n"
        "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ /joke ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç (ru)\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {st.mode}, –ø–æ—Ä–æ–≥: {st.threshold:.2f}, –∞–∫—Ç–∏–≤–µ–Ω: {'–¥–∞' if st.active else '–Ω–µ—Ç'}"
    )

# NEW: /joke ‚Äî —Ç—è–Ω–µ–º –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ Shortiki
async def cmd_joke(update: Update, context: ContextTypes.DEFAULT_TYPE):
    joke = get_joke_from_api()
    await update.message.reply_text(f"{joke}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    chat_id = update.effective_chat.id
    st = get_state(chat_id)
    if not st.active:
        return

    user_text = (update.message.text or "").strip()
    if not user_text:
        return

    try:
        proba = float(predict_toxic_proba([user_text]))
    except Exception as e:
        log.exception("predict_toxic_proba failed")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ (—Å–º. –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞).")
        return

    percent = f"{proba * 100:.1f}%"

    if st.mode == "all":
        await update.message.reply_text(f"üß™ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {percent}")
    else:
        if proba >= st.threshold:
            await update.message.reply_text(
                f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ–µ.\n"
                f"üß™ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: {percent} (–ø–æ—Ä–æ–≥ {st.threshold:.2f})"
            )
        else:
            pass  # –º–æ–ª—á–∏–º


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–•–û–î–ù–ê–Ø –¢–û–ß–ö–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _register_bot_commands(app: Application) -> None:
    """
    (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram.
    –≠—Ç–æ –¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ /–∫–æ–º–∞–Ω–¥.
    """
    commands = [
        BotCommand("start", "–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ (—Ä–µ–∂–∏–º: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"),
        BotCommand("stop", "–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("all_massages", "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"),
        BotCommand("only_toxic", "–û—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ ‚â• –ø–æ—Ä–æ–≥–∞ (0..1)"),
        BotCommand("status", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("joke", "–ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç (ru)"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    ]
    await app.bot.set_my_commands(commands)

def main():
    app = Application.builder().token(API_KEY).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("all_massages", cmd_all_messages))
    app.add_handler(CommandHandler("all_messages", cmd_all_messages))  # —Å–∏–Ω–æ–Ω–∏–º
    app.add_handler(CommandHandler("only_toxic", cmd_only_toxic))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("help", cmd_help))      # NEW
    app.add_handler(CommandHandler("joke", cmd_joke))      # NEW

    # –¢–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º /–∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    app.post_init = _register_bot_commands  # NEW: –≤—ã–∑–æ–≤–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    app.run_polling(allowed_updates=["message"])


if __name__ == "__main__":
    main()
